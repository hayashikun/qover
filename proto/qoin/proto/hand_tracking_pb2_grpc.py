# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined server."""
import grpc

from qoin.proto import hand_tracking_pb2 as qoin_dot_proto_dot_hand__tracking__pb2


class HandTrackingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandTrackingPullStream = channel.unary_stream(
                '/qoin.HandTracking/HandTrackingPullStream',
                request_serializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPullRequest.SerializeToString,
                response_deserializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPullReply.FromString,
                )
        self.HandTrackingPushStream = channel.stream_unary(
                '/qoin.HandTracking/HandTrackingPushStream',
                request_serializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPushRequest.SerializeToString,
                response_deserializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPushReply.FromString,
                )


class HandTrackingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HandTrackingPullStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HandTrackingPushStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HandTrackingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandTrackingPullStream': grpc.unary_stream_rpc_method_handler(
                    servicer.HandTrackingPullStream,
                    request_deserializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPullRequest.FromString,
                    response_serializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPullReply.SerializeToString,
            ),
            'HandTrackingPushStream': grpc.stream_unary_rpc_method_handler(
                    servicer.HandTrackingPushStream,
                    request_deserializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPushRequest.FromString,
                    response_serializer=qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPushReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'qoin.HandTracking', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HandTracking(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HandTrackingPullStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/qoin.HandTracking/HandTrackingPullStream',
            qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPullRequest.SerializeToString,
            qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPullReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HandTrackingPushStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/qoin.HandTracking/HandTrackingPushStream',
            qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPushRequest.SerializeToString,
            qoin_dot_proto_dot_hand__tracking__pb2.HandTrackingPushReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
